--- readline-8.0/doc/history.3	2019-02-17 00:19:19.965512695 +0000
+++ readline-8.0/doc/history.3.new	2019-02-17 00:22:11.518437009 +0000
@@ -353,47 +353,47 @@ Set the state of the history list accord
 These functions manage individual entries on the history list, or set
 parameters managing the list itself.
 
-.Fn1 void add_history "const char *string"
+.F1 void add_history "const char *string"
 Place \fIstring\fP at the end of the history list.  The associated data
 field (if any) is set to \fBNULL\fP.
 If the maximum number of history entries has been set using
 \fBstifle_history()\fP, and the new number of history entries would exceed
 that maximum, the oldest history entry is removed.
 
-.Fn1 void add_history_time "const char *string"
+.F1 void add_history_time "const char *string"
 Change the time stamp associated with the most recent history entry to
 \fIstring\fP.
 
-.Fn1 "HIST_ENTRY *" remove_history "int which"
+.F1 "HIST_ENTRY *" remove_history "int which"
 Remove history entry at offset \fIwhich\fP from the history.  The
 removed element is returned so you can free the line, data,
 and containing structure.
 
-.Fn1 "histdata_t" free_history_entry "HIST_ENTRY *histent"
+.F1 "histdata_t" free_history_entry "HIST_ENTRY *histent"
 Free the history entry \fIhistent\fP and any history library private
 data associated with it.  Returns the application-specific data
 so the caller can dispose of it.
 
-.Fn3 "HIST_ENTRY *" replace_history_entry "int which" "const char *line" "histdata_t data"
+.F3 "HIST_ENTRY *" replace_history_entry "int which" "const char *line" "histdata_t data"
 Make the history entry at offset \fIwhich\fP have \fIline\fP and \fIdata\fP.
 This returns the old entry so the caller can dispose of any
 application-specific data.  In the case
 of an invalid \fIwhich\fP, a \fBNULL\fP pointer is returned.
 
-.Fn1 void clear_history "void"
+.F1 void clear_history "void"
 Clear the history list by deleting all the entries.
 
-.Fn1 void stifle_history "int max"
+.F1 void stifle_history "int max"
 Stifle the history list, remembering only the last \fImax\fP entries.
 The history list will contain only \fImax\fP entries at a time.
 
-.Fn1 int unstifle_history "void"
+.F1 int unstifle_history "void"
 Stop stifling the history.  This returns the previously-set
 maximum number of history entries (as set by \fBstifle_history()\fP).
 history was stifled.  The value is positive if the history was
 stifled, negative if it wasn't.
 
-.Fn1 int history_is_stifled "void"
+.F1 int history_is_stifled "void"
 Returns non-zero if the history is stifled, zero if it is not.
 
 .SS Information About the History List
@@ -401,30 +401,30 @@ Returns non-zero if the history is stifl
 These functions return information about the entire history list or
 individual list entries.
 
-.Fn1 "HIST_ENTRY **" history_list "void"
+.F1 "HIST_ENTRY **" history_list "void"
 Return a \fBNULL\fP terminated array of \fIHIST_ENTRY *\fP which is the
 current input history.  Element 0 of this list is the beginning of time.
 If there is no history, return \fBNULL\fP.
 
-.Fn1 int where_history "void"
+.F1 int where_history "void"
 Returns the offset of the current history element.
 
-.Fn1 "HIST_ENTRY *" current_history "void"
+.F1 "HIST_ENTRY *" current_history "void"
 Return the history entry at the current position, as determined by
 \fBwhere_history()\fP.  If there is no entry there, return a \fBNULL\fP
 pointer.
 
-.Fn1 "HIST_ENTRY *" history_get "int offset"
+.F1 "HIST_ENTRY *" history_get "int offset"
 Return the history entry at position \fIoffset\fP.
 The range of valid values of \fIoffset\fP starts at \fBhistory_base\fP
 and ends at \fBhistory_length\fP \- 1.
 If there is no entry there, or if \fIoffset\fP is outside the valid
 range, return a \fBNULL\fP pointer.
 
-.Fn1 "time_t" history_get_time "HIST_ENTRY *"
+.F1 "time_t" history_get_time "HIST_ENTRY *"
 Return the time stamp associated with the history entry passed as the argument.
 
-.Fn1 int history_total_bytes "void"
+.F1 int history_total_bytes "void"
 Return the number of bytes that the primary history entries are using.
 This function returns the sum of the lengths of all the lines in the
 history.
@@ -434,18 +434,18 @@ history.
 These functions allow the current index into the history list to be
 set or changed.
 
-.Fn1 int history_set_pos "int pos"
+.F1 int history_set_pos "int pos"
 Set the current history offset to \fIpos\fP, an absolute index
 into the list.
 Returns 1 on success, 0 if \fIpos\fP is less than zero or greater
 than the number of history entries.
 
-.Fn1 "HIST_ENTRY *" previous_history "void"
+.F1 "HIST_ENTRY *" previous_history "void"
 Back up the current history offset to the previous history entry, and
 return a pointer to that entry.  If there is no previous entry, return
 a \fBNULL\fP pointer.
 
-.Fn1 "HIST_ENTRY *" next_history "void"
+.F1 "HIST_ENTRY *" next_history "void"
 If the current history offset refers to a valid history entry,
 increment the current history offset.
 If the possibly-incremented history offset refers to a valid history
